import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Grid as MuiGrid,
  Paper,
  Card,
  CardContent,
  CardHeader,
  IconButton,
  Button,
  Stack,
  Chip,
  Slider,
  ToggleButtonGroup,
  ToggleButton,
  Divider,
  CircularProgress,
  Alert,
  useTheme,
  useMediaQuery,
  Tab,
  Tabs,
  FormControl,
  Select,
  MenuItem,
  Tooltip
} from '@mui/material';
import { styled } from '@mui/material/styles';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import PauseIcon from '@mui/icons-material/Pause';
import FullscreenIcon from '@mui/icons-material/Fullscreen';
import FullscreenExitIcon from '@mui/icons-material/FullscreenExit';
import ZoomInIcon from '@mui/icons-material/ZoomIn';
import ZoomOutIcon from '@mui/icons-material/ZoomOut';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import ChevronRightIcon from '@mui/icons-material/ChevronRight';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import SpeedIcon from '@mui/icons-material/Speed';
import TrafficIcon from '@mui/icons-material/Traffic';
import DirectionsCarIcon from '@mui/icons-material/DirectionsCar';
import VisibilityIcon from '@mui/icons-material/Visibility';
import TimelapseIcon from '@mui/icons-material/Timelapse';
import SettingsIcon from '@mui/icons-material/Settings';
import Header from './Header';
import Sidebar from './Sidebar';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import CenterFocusStrongIcon from '@mui/icons-material/CenterFocusStrong';
import VideocamIcon from '@mui/icons-material/Videocam';
import InsightsIcon from '@mui/icons-material/Insights';
import FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';
import KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown';

// Mock data for the selected intersection
const mockIntersectionData = [
  { 
    id: 1, 
    name: 'North Gate Junction', 
    location: 'Main Entrance Intersection', 
    status: 'Online',
    trafficLevel: 'Low',
    vehicleCount: 42,
    lastUpdated: '2 min ago',
    description: 'Major intersection connecting north campus entrance with the main road'
  },
  { 
    id: 2, 
    name: 'South Gate Crossing', 
    location: 'Back Entrance Intersection', 
    status: 'Online',
    trafficLevel: 'Medium',
    vehicleCount: 87,
    lastUpdated: '5 min ago',
    description: 'Four-way intersection at the southern entrance of the campus'
  },
  { 
    id: 3, 
    name: 'East Highway Junction', 
    location: 'Highway 101 Intersection', 
    status: 'Online',
    trafficLevel: 'High',
    vehicleCount: 153,
    lastUpdated: 'Just now',
    description: 'High traffic intersection connecting to Highway 101'
  },
  { 
    id: 4, 
    name: 'West City Center', 
    location: 'Downtown Crossing', 
    status: 'Offline',
    trafficLevel: 'Low',
    vehicleCount: 0,
    lastUpdated: '1 hr ago',
    description: 'Downtown intersection with pedestrian crossing'
  },
];

// Create a styled Grid component to fix TypeScript errors
const Grid = styled(MuiGrid)(({ theme }) => ({
  // Base styling here if needed
}));

// Create separate items to avoid type errors - updated styling
const GridItem = styled(MuiGrid)(({ theme }) => ({
  padding: theme.spacing(1),
  boxSizing: 'border-box',
}));

// And for container - updated styling
const GridContainer = styled(MuiGrid)(({ theme }) => ({
  width: '100%',
  margin: 0,
  padding: 0,
  boxSizing: 'border-box',
}));

// Type the props properly to avoid TypeScript errors
// The 'as any' is a temporary solution to make TypeScript happy
// In a production environment, you would want to define proper interfaces
const StyledGridItem = (props: any) => <GridItem {...props} />;
const StyledGridContainer = (props: any) => <GridContainer {...props} />;

// Create a styled Paper for consistent card styling
const StyledCard = styled(Paper)(({ theme }) => ({
  borderRadius: 12,
  overflow: 'hidden',
  border: '1px solid #eaeaea',
  height: '100%',
  backgroundColor: '#fff',
  boxShadow: '0 2px 10px rgba(0, 0, 0, 0.05)',
  width: '100%'
}));

// Direct control pad styling
const ControlPad = styled(Box)(({ theme }) => ({
  width: 140,
  height: 140,
  position: 'relative',
  border: '2px solid #eaeaea',
  borderRadius: '50%',
  margin: '0 auto',
  backgroundColor: 'rgba(103, 174, 110, 0.05)'
}));

// Control button styling
const ControlButton = styled(IconButton)(({ theme }) => ({
  backgroundColor: 'white',
  border: '1px solid #eaeaea',
  '&:hover': {
    backgroundColor: 'rgba(103, 174, 110, 0.1)',
  }
}));

// Section title styling
const SectionTitle = styled(Typography)(({ theme }) => ({
  fontSize: '1.1rem',
  fontWeight: 600,
  marginBottom: theme.spacing(2),
  display: 'flex',
  alignItems: 'center',
  '& > svg': {
    marginRight: theme.spacing(1),
    color: '#67AE6E'
  }
}));

// Styled components for better UI organization
const ControlSection = styled(Box)(({ theme }) => ({
  marginBottom: theme.spacing(2),
  padding: theme.spacing(1.5),
  backgroundColor: 'rgba(243, 246, 249, 0.6)',
  borderRadius: theme.shape.borderRadius,
  border: '1px solid #eaeaea',
}));

const ControlLabel = styled(Typography)(({ theme }) => ({
  fontWeight: 500,
  color: theme.palette.text.secondary,
  marginBottom: theme.spacing(1),
  display: 'flex',
  alignItems: 'center',
  fontSize: '0.875rem',
  '& svg': {
    marginRight: theme.spacing(0.7),
    fontSize: '1rem',
  },
}));

const StyledIconButton = styled(IconButton)(({ theme }) => ({
  backgroundColor: 'white',
  border: '1px solid #eaeaea',
  boxShadow: '0 1px 2px 0 rgba(0,0,0,0.05)',
  width: '32px',
  height: '32px',
  padding: '6px',
  '&:hover': {
    backgroundColor: theme.palette.grey[100],
  },
}));

const CameraDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [mobileOpen, setMobileOpen] = useState(false);
  const [isCollapsed, setIsCollapsed] = useState(true);
  
  // Camera control states
  const [zoomLevel, setZoomLevel] = useState<number[]>([1, 1]);
  const [panTiltSpeed, setPanTiltSpeed] = useState<number>(50);
  const [isPlaying, setIsPlaying] = useState<boolean[]>([true, true]);
  const [isFullscreen, setIsFullscreen] = useState<boolean[]>([false, false]);
  const [videoMode, setVideoMode] = useState<string>('live');
  const [selectedCamera, setSelectedCamera] = useState<number>(0);
  const [activeTab, setActiveTab] = useState<number>(0);
  const [rightPanelTab, setRightPanelTab] = useState(0);
  
  // Find intersection data based on ID
  const intersectionId = parseInt(id || '1');
  const intersection = mockIntersectionData.find(item => item.id === intersectionId) || mockIntersectionData[0];
  
  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const handleCollapseChange = (collapsed: boolean) => {
    setIsCollapsed(collapsed);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
    console.log("Tab changed to:", newValue === 0 ? "Camera Feeds" : "Traffic Analysis");
    
    // Scroll to top when switching tabs
    if (document.querySelector('main')) {
      document.querySelector('main')?.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
  };

  const handleRightPanelTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setRightPanelTab(newValue);
  };

  const drawerWidth = 260;
  const collapsedWidth = 72;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Online':
        return '#67AE6E';
      case 'Offline':
        return '#f44336';
      case 'Maintenance':
        return '#ff9800';
      default:
        return '#777';
    }
  };

  const getTrafficLevelColor = (level: string) => {
    switch (level) {
      case 'Low':
        return '#67AE6E';
      case 'Medium':
        return '#ff9800';
      case 'High':
        return '#f44336';
      default:
        return '#777';
    }
  };
  
  const handleZoomChange = (index: number, newValue: number | number[]) => {
    const newZoomLevels = [...zoomLevel];
    newZoomLevels[index] = newValue as number;
    setZoomLevel(newZoomLevels);
  };
  
  const handlePlayPause = (index: number) => {
    const newPlayingState = [...isPlaying];
    newPlayingState[index] = !newPlayingState[index];
    setIsPlaying(newPlayingState);
  };
  
  const handleFullscreen = (index: number) => {
    const newFullscreenState = [...isFullscreen];
    newFullscreenState[index] = !newFullscreenState[index];
    setIsFullscreen(newFullscreenState);
  };
  
  const handleVideoModeChange = (
    event: React.MouseEvent<HTMLElement>,
    newMode: string,
  ) => {
    if (newMode !== null) {
      setVideoMode(newMode);
    }
  };
  
  const handleBackToList = () => {
    navigate(-1);
  };

  const handleSelectCamera = (index: number) => {
    setSelectedCamera(index);
  };

  const trafficMgmtRef = React.useRef<HTMLDivElement>(null);
  
  const scrollToTrafficMgmt = () => {
    if (trafficMgmtRef.current) {
      trafficMgmtRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <Box sx={{ 
      display: 'flex', 
      height: '100vh', 
      width: '100%',
      overflow: 'hidden'
    }}>
      <Header 
        drawerWidth={drawerWidth} 
        handleDrawerToggle={handleDrawerToggle}
        isMobile={isMobile}
        isCollapsed={isCollapsed}
        collapsedWidth={collapsedWidth}
      />
      
      <Sidebar
        drawerWidth={drawerWidth}
        mobileOpen={mobileOpen}
        handleDrawerToggle={handleDrawerToggle}
        onCollapseChange={handleCollapseChange}
      />
      
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          pt: '64px',
          height: 'auto',
          minHeight: '100vh',
          overflow: 'auto',
          bgcolor: '#f5f7fa',
          width: {
            sm: `calc(100% - ${isCollapsed ? collapsedWidth : drawerWidth}px)`,
            xs: '100%'
          },
          maxWidth: '100%',
          display: 'flex',
          flexDirection: 'column'
        }}
      >
        <Box 
          sx={{ 
            p: { xs: 2, sm: 3 },
            height: 'calc(100vh - 64px)',
            minHeight: activeTab === 1 ? 'auto' : 'calc(100vh - 64px)', // Allow content to expand in Traffic Analysis tab
            overflow: 'auto',
            width: '100%',
            maxWidth: '100%',
            boxSizing: 'border-box',
            display: 'flex',
            flexDirection: 'column',
            '&::-webkit-scrollbar': {
              width: '8px',
            },
            '&::-webkit-scrollbar-thumb': {
              backgroundColor: 'rgba(0,0,0,.2)',
              borderRadius: '10px',
            }
          }}
        >
          {/* Header section with back button and intersection info - SMALLER CARD */}
          <Box sx={{ mb: 3 }}>
          <Button
            variant="outlined"
            color="primary"
            startIcon={<ArrowBackIcon />}
            onClick={handleBackToList}
            sx={{ 
                mb: 2, 
              borderRadius: '50px',
              borderColor: '#e0e0e0',
              color: '#67AE6E',
              '&:hover': {
                borderColor: '#67AE6E',
                backgroundColor: 'rgba(103, 174, 110, 0.04)',
                },
                mr: 1 // Add margin right to prevent overlapping
            }}
          >
            Back to Dashboard
          </Button>
          
            {/* Compact intersection info card */}
            <StyledCard sx={{ mb: 2, py: 2, px: 3 }}>
              <Box sx={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'space-between', 
                flexWrap: 'wrap'
              }}>
                <Box sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  maxWidth: { xs: '100%', sm: '70%' }
                }}>
              <Box>
                    <Typography variant="h5" sx={{ fontWeight: 600, color: '#333' }}>
                  {intersection.name}
                </Typography>
                    <Typography variant="body2" color="text.secondary">
                  {intersection.location}
                    </Typography>
                    
                    <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', mr: 3 }}>
                        <DirectionsCarIcon sx={{ fontSize: 16, color: '#67AE6E', mr: 0.5 }} />
                        <Typography variant="caption" fontWeight={500}>
                          {intersection.vehicleCount} vehicles
                </Typography>
                      </Box>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <TimelapseIcon sx={{ fontSize: 16, color: '#67AE6E', mr: 0.5 }} />
                        <Typography variant="caption" fontWeight={500}>
                          Last updated: {intersection.lastUpdated}
                        </Typography>
                      </Box>
                    </Box>
                  </Box>
              </Box>
              
                <Stack direction="row" spacing={1} sx={{ mt: { xs: 1, sm: 0 } }}>
                <Chip
                  label={`${intersection.trafficLevel} Traffic`}
                    size="small"
                  sx={{
                    backgroundColor: `rgba(${intersection.trafficLevel === 'Low' ? '103, 174, 110' : intersection.trafficLevel === 'Medium' ? '255, 152, 0' : '244, 67, 54'}, 0.1)`,
                    color: getTrafficLevelColor(intersection.trafficLevel),
                      fontSize: '0.75rem',
                    fontWeight: 500,
                      height: 24
                  }}
                />
                <Chip
                  label={intersection.status}
                    size="small"
                  sx={{
                    backgroundColor: `rgba(${intersection.status === 'Online' ? '103, 174, 110' : intersection.status === 'Maintenance' ? '255, 152, 0' : '244, 67, 54'}, 0.1)`,
                    color: getStatusColor(intersection.status),
                      fontSize: '0.75rem',
                    fontWeight: 500,
                      height: 24
                  }}
                />
              </Stack>
            </Box>
            </StyledCard>
            
            {/* Tabs for Camera Feeds and Traffic Analysis */}
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Tabs 
                value={activeTab}
                onChange={handleTabChange}
                sx={{ 
                  borderBottom: '1px solid #e0e0e0',
                  flex: 1,
                  '& .MuiTab-root': {
                    textTransform: 'none',
                    fontWeight: 600,
                    fontSize: '0.9rem',
                    minWidth: 'unset',
                    px: 2,
                    py: 1,
                  },
                  '& .Mui-selected': {
                    color: '#67AE6E'
                  },
                  '& .MuiTabs-indicator': {
                    backgroundColor: '#67AE6E',
                    height: 3
                  }
                }}
              >
                <Tab label="Camera Feeds" icon={<VisibilityIcon fontSize="small" />} iconPosition="start" />
                <Tab label="Traffic Analysis" icon={<TrafficIcon fontSize="small" />} iconPosition="start" />
              </Tabs>
              
              {activeTab === 0 && (
            <ToggleButtonGroup
              value={videoMode}
              exclusive
              onChange={handleVideoModeChange}
              size="small"
              aria-label="video mode"
              sx={{
                    ml: 2,
                '.MuiToggleButtonGroup-grouped': {
                  border: '1px solid #e0e0e0',
                  '&.Mui-selected': {
                    backgroundColor: 'rgba(103, 174, 110, 0.1)',
                    color: '#67AE6E',
                    fontWeight: 500
                  }
                }
              }}
            >
              <ToggleButton value="live" aria-label="live mode" sx={{ textTransform: 'none' }}>
                Live
              </ToggleButton>
              <ToggleButton value="recording" aria-label="recording mode" sx={{ textTransform: 'none' }}>
                Recordings
              </ToggleButton>
              <ToggleButton value="analytics" aria-label="analytics mode" sx={{ textTransform: 'none' }}>
                Analytics
              </ToggleButton>
            </ToggleButtonGroup>
              )}
            </Box>
          </Box>
          
          {/* Camera Feeds Tab */}
          {activeTab === 0 && (
            <>
              {/* Camera display section - Fixed layout with side panel */}
              <Box sx={{ 
                display: 'flex', 
                flexDirection: { xs: 'column', md: 'row' }, 
                width: '100%',
                gap: 2
              }}>
                {/* Left section - Camera displays */}
                <Box sx={{ 
                  flex: { xs: '1 1 100%', md: isFullscreen[selectedCamera] ? '1 1 100%' : '1 1 72%' },
                  minHeight: { xs: 'auto', md: '600px' }
                }}>
                  <StyledCard sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                    <Box sx={{ 
                      position: 'relative', 
                      flex: 1,
                      display: 'flex',
                      flexDirection: 'column'
                    }}>
                  <Box
                    sx={{
                          flex: 1,
                          minHeight: isFullscreen[selectedCamera] ? 600 : 400,
                      backgroundColor: '#222',
                      position: 'relative',
                      backgroundImage: 'repeating-linear-gradient(45deg, #333 0, #333 5px, #2a2a2a 5px, #2a2a2a 10px)',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      '&::after': {
                        content: '""',
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundImage: 'radial-gradient(circle, rgba(0,0,0,0) 50%, rgba(0,0,0,0.5) 100%)',
                      }
                    }}
                  >
                        {!isPlaying[selectedCamera] && (
                      <Box sx={{
                        position: 'absolute',
                        top: '50%',
                        left: '50%',
                        transform: 'translate(-50%, -50%)',
                        zIndex: 2,
                        backgroundColor: 'rgba(0,0,0,0.6)',
                        borderRadius: '50%',
                        width: 60,
                        height: 60,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        <PauseIcon sx={{ color: 'white', fontSize: 32 }} />
                      </Box>
                    )}
                    
                    <TrafficIcon sx={{ fontSize: 48, color: '#aaa' }} />
                    
                    <Box
                      sx={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        width: '100%',
                        height: '100%',
                        opacity: 0.03,
                        backgroundSize: '3px 3px',
                        backgroundImage: 'linear-gradient(to right, #fff 1px, transparent 1px), linear-gradient(to bottom, #fff 1px, transparent 1px)'
                      }}
                    />
                    
                    {/* Camera controls overlay */}
                    <Box
                      sx={{
                        position: 'absolute',
                        bottom: 0,
                        left: 0,
                        right: 0,
                        background: 'linear-gradient(transparent, rgba(0,0,0,0.7))',
                        padding: '30px 16px 12px',
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center'
                      }}
                    >
                      <Typography variant="subtitle2" color="white">
                                Camera {selectedCamera + 1} - {selectedCamera === 0 ? 'North' : 'South'} View
                      </Typography>
                      
                      <Box>
                        <IconButton 
                          size="small" 
                          sx={{ color: 'white', marginRight: 1 }}
                                  onClick={() => handlePlayPause(selectedCamera)}
                        >
                                  {isPlaying[selectedCamera] ? <PauseIcon /> : <PlayArrowIcon />}
                        </IconButton>
                        <IconButton 
                          size="small" 
                          sx={{ color: 'white' }}
                                  onClick={() => handleFullscreen(selectedCamera)}
                        >
                                  {isFullscreen[selectedCamera] ? <FullscreenExitIcon /> : <FullscreenIcon />}
                        </IconButton>
                      </Box>
                    </Box>
                  </Box>
                </Box>
                
                    {/* Camera preview strip - more compact */}
                    {!isFullscreen[selectedCamera] && (
                      <Box sx={{ p: 1.5, display: 'flex', justifyContent: 'center', gap: 1.5 }}>
                        <Box 
                          onClick={() => handleSelectCamera(0)}
                          sx={{ 
                            width: 90, 
                            height: 50, 
                            backgroundColor: '#333',
                            borderRadius: 1,
                            cursor: 'pointer',
                            position: 'relative',
                            border: selectedCamera === 0 ? '2px solid #67AE6E' : '2px solid transparent',
                            opacity: selectedCamera === 0 ? 1 : 0.7,
                            '&:hover': { opacity: 1 }
                          }}
                        >
                          <Typography variant="caption" sx={{ position: 'absolute', bottom: 3, left: 5, color: 'white', fontSize: '0.7rem' }}>
                            Camera 1
                          </Typography>
                        </Box>
                        <Box 
                          onClick={() => handleSelectCamera(1)}
                        sx={{ 
                            width: 90, 
                            height: 50, 
                            backgroundColor: '#333',
                            borderRadius: 1,
                            cursor: 'pointer',
                            position: 'relative',
                            border: selectedCamera === 1 ? '2px solid #67AE6E' : '2px solid transparent',
                            opacity: selectedCamera === 1 ? 1 : 0.7,
                            '&:hover': { opacity: 1 }
                          }}
                        >
                          <Typography variant="caption" sx={{ position: 'absolute', bottom: 3, left: 5, color: 'white', fontSize: '0.7rem' }}>
                            Camera 2
                          </Typography>
                        </Box>
                      </Box>
                    )}
                  </StyledCard>
                </Box>
                
                {/* Right section - Camera controls side panel with tabs */}
                {!isFullscreen[selectedCamera] && (
                  <Box sx={{ 
                    flex: { xs: '1 1 100%', md: '0 0 28%' },
                    position: { md: 'sticky' },
                    top: { md: '80px' },
                    alignSelf: { md: 'flex-start' },
                    minHeight: { xs: 'auto', md: '600px' },
                    maxHeight: { md: 'calc(100vh - 200px)' },
                    display: 'flex',
                    flexDirection: 'column'
                  }}>
                    <StyledCard sx={{ 
                      height: '100%',
                      display: 'flex',
                      flexDirection: 'column',
                      overflowY: 'auto'
                    }}>
                      {/* Rest of the right panel content */}
                    </StyledCard>
                  </Box>
                )}
              </Box>
              
              {/* Traffic Analytics Section at the bottom of Camera Feeds tab */}
              <Box sx={{ mt: 4, width: '100%' }}>
                <Typography variant="h5" gutterBottom sx={{ 
                  fontWeight: 'bold', 
                  display: 'flex', 
                  alignItems: 'center',
                  color: '#333'
                }}>
                  <InsightsIcon sx={{ mr: 1, color: '#1976d2' }} />
                  Traffic Analytics
                </Typography>
                
                <StyledGridContainer container spacing={3}>
                  {/* Current Traffic Metrics */}
                  <StyledGridItem item xs={12} md={8}>
                    <StyledCard sx={{ p: 3 }}>
                      <SectionTitle>
                        <SpeedIcon />
                        Current Traffic Metrics
                      </SectionTitle>
                      
                      <StyledGridContainer container spacing={2}>
                        <StyledGridItem item xs={12} sm={3}>
                          <Box sx={{ 
                            p: 2, 
                            backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                            borderRadius: 2,
                            height: '100%'
                          }}>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                              Vehicle Count
                            </Typography>
                            <Typography variant="h3" fontWeight={600} color="#333">
                              {intersection.vehicleCount}
                            </Typography>
                          </Box>
                        </StyledGridItem>
                        
                        <StyledGridItem item xs={12} sm={3}>
                          <Box sx={{ 
                            p: 2, 
                            backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                            borderRadius: 2,
                            height: '100%' 
                          }}>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                              Traffic Level
                            </Typography>
                            <Typography variant="h5" fontWeight={600} sx={{ 
                              color: getTrafficLevelColor(intersection.trafficLevel),
                              display: 'flex',
                              alignItems: 'center',
                              '& .chip': {
                                ml: 1,
                                fontSize: '0.75rem',
                                borderRadius: '12px',
                                padding: '4px 8px',
                                backgroundColor: `rgba(${intersection.trafficLevel === 'Low' ? '103, 174, 110' : intersection.trafficLevel === 'Medium' ? '255, 152, 0' : '244, 67, 54'}, 0.1)`,
                              }
                            }}>
                              {intersection.trafficLevel}
                              <span className="chip">{intersection.trafficLevel === 'Low' ? 'Normal Flow' : intersection.trafficLevel === 'Medium' ? 'Moderate' : 'Congested'}</span>
                            </Typography>
                          </Box>
                        </StyledGridItem>
                        
                        <StyledGridItem item xs={12} sm={3}>
                          <Box sx={{ 
                            p: 2, 
                            backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                            borderRadius: 2,
                            height: '100%'
                          }}>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                              Average Speed
                            </Typography>
                            <Typography variant="h4" fontWeight={600} color="#333">
                              {intersection.trafficLevel === 'Low' ? '35' : intersection.trafficLevel === 'Medium' ? '28' : '15'} <span style={{ fontSize: '1rem' }}>mph</span>
                            </Typography>
                          </Box>
                        </StyledGridItem>
                        
                        <StyledGridItem item xs={12} sm={3}>
                          <Box sx={{ 
                            p: 2, 
                            backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                            borderRadius: 2,
                            height: '100%'
                          }}>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                              Wait Time
                            </Typography>
                            <Typography variant="h4" fontWeight={600} color="#333">
                              {intersection.trafficLevel === 'Low' ? '45' : intersection.trafficLevel === 'Medium' ? '90' : '180'} <span style={{ fontSize: '1rem' }}>sec</span>
                            </Typography>
                          </Box>
                        </StyledGridItem>
                      </StyledGridContainer>
                    </StyledCard>
                  </StyledGridItem>
                  
                  {/* Traffic Direction Analysis */}
                  <StyledGridItem item xs={12} md={4}>
                    <StyledCard sx={{ p: 3, height: '100%' }}>
                      <SectionTitle>
                        <TrafficIcon />
                        Traffic Flow
                      </SectionTitle>
                      
                      <Box sx={{ display: 'flex', flexDirection: 'column', height: 'calc(100% - 40px)' }}>
                        <Box sx={{ 
                          backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                          p: 2, 
                          borderRadius: 2,
                          mb: 2
                        }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                            <Typography variant="body2">North/South</Typography>
                            <Typography variant="body2" color="text.secondary">65%</Typography>
                          </Box>
                          <Box sx={{ width: '100%', height: 10, backgroundColor: '#e0e0e0', borderRadius: 5, overflow: 'hidden' }}>
                            <Box sx={{ width: '65%', height: '100%', backgroundColor: '#67AE6E', borderRadius: 5 }} />
                          </Box>
                        </Box>
                        
                        <Box sx={{ 
                          backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                          p: 2, 
                          borderRadius: 2,
                          mb: 2
                        }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                            <Typography variant="body2">East/West</Typography>
                            <Typography variant="body2" color="text.secondary">35%</Typography>
                          </Box>
                          <Box sx={{ width: '100%', height: 10, backgroundColor: '#e0e0e0', borderRadius: 5, overflow: 'hidden' }}>
                            <Box sx={{ width: '35%', height: '100%', backgroundColor: '#67AE6E', borderRadius: 5 }} />
                          </Box>
                        </Box>
                        
                        <Box sx={{ 
                          backgroundColor: 'rgba(244, 67, 54, 0.05)', 
                          p: 2, 
                          borderRadius: 2,
                          border: '1px dashed rgba(244, 67, 54, 0.3)',
                          mt: 'auto'
                        }}>
                          <Typography variant="body2" sx={{ display: 'flex', alignItems: 'center' }}>
                            <FiberManualRecordIcon sx={{ color: '#f44336', fontSize: '0.8rem', mr: 1 }} />
                            <strong>Congestion Alert:</strong>&nbsp;Increasing volume on North approach
                          </Typography>
                        </Box>
                      </Box>
                    </StyledCard>
                  </StyledGridItem>
                  
                  {/* Traffic Trend */}
                  <StyledGridItem item xs={12}>
                    <StyledCard sx={{ p: 3 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                        <SectionTitle sx={{ mb: 0 }}>
                          <TimelapseIcon />
                          Traffic Trend (Last 2 Hours)
                        </SectionTitle>
                        
                        <Button 
                          variant="outlined" 
                          size="small"
                          onClick={() => setActiveTab(1)}
                          endIcon={<ArrowForwardIcon />}
                          sx={{ 
                            borderColor: '#1976d2',
                            color: '#1976d2',
                            fontSize: '0.8rem'
                          }}
                        >
                          Detailed Analysis
                        </Button>
                      </Box>
                      
                      {/* Mock Chart - In a real app, you would use a chart library */}
                      <Box sx={{ 
                        height: 120, 
                        position: 'relative', 
                        p: 1,
                        backgroundColor: 'rgba(25, 118, 210, 0.03)',
                        borderRadius: 1,
                        border: '1px solid rgba(25, 118, 210, 0.1)',
                        display: 'flex',
                        alignItems: 'flex-end',
                        justifyContent: 'space-between',
                        px: 2
                      }}>
                        {/* Mock chart bars */}
                        {[15, 25, 30, 50, 45, 60, 30, 25, 40, 65, 55, 40].map((height, index) => (
                          <Box 
                            key={index}
                            sx={{ 
                              height: `${height}%`, 
                              width: 16, 
                              backgroundColor: height > 50 ? '#f44336' : height > 30 ? '#ff9800' : '#67AE6E',
                              borderRadius: '3px 3px 0 0'
                            }}
                          />
                        ))}
                        
                        {/* X-axis labels - simplified version */}
                        <Box sx={{ 
                          position: 'absolute', 
                          bottom: -25, 
                          left: 8, 
                          right: 8, 
                          display: 'flex', 
                          justifyContent: 'space-between' 
                        }}>
                          <Typography variant="caption" color="text.secondary">10 AM</Typography>
                          <Typography variant="caption" color="text.secondary">12 PM</Typography>
                        </Box>
                      </Box>
                    </StyledCard>
                  </StyledGridItem>
                </StyledGridContainer>
              </Box>
            </>
          )}
          
          {/* Traffic Analysis Tab - Fixed layout */}
          {activeTab === 1 && (
            <>
              {/* Debug message */}
              <Box sx={{ 
                p: 2, 
                mb: 2, 
                backgroundColor: '#f8d7da', 
                color: '#721c24',
                borderRadius: 1,
                border: '1px solid #f5c6cb',
                fontWeight: 'bold',
                fontSize: '1.1rem',
                textAlign: 'center',
                position: 'sticky',
                top: 0,
                zIndex: 5
              }}>
                ⚠️ Traffic Analysis Tab Active - Scroll Down To See Traffic Light Management ⚠️
              </Box>
              
              {/* Scroll helper button */}
              <Button
                variant="contained"
                color="primary"
                startIcon={<KeyboardDoubleArrowDownIcon />}
                onClick={scrollToTrafficMgmt}
                sx={{
                  position: 'fixed',
                  bottom: 20,
                  right: 20,
                  zIndex: 10,
                  borderRadius: '50px',
                  padding: '10px 20px',
                  boxShadow: '0 4px 10px rgba(0,0,0,0.2)'
                }}
              >
                Jump to Traffic Light Management
              </Button>
              
              <StyledGridContainer container spacing={2}>
                {/* Current Traffic Metrics */}
                <StyledGridItem item xs={12} md={6}>
                  <StyledCard sx={{ p: 3 }}>
                    <SectionTitle>
                      <SpeedIcon />
                      Current Traffic Metrics
                    </SectionTitle>
                    
                    <StyledGridContainer container spacing={2}>
                      <StyledGridItem item xs={12} sm={6}>
                        <Box sx={{ 
                          p: 2, 
                          backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                          borderRadius: 2,
                          height: '100%'
                        }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Vehicle Count
                          </Typography>
                          <Typography variant="h3" fontWeight={600} color="#333">
                            {intersection.vehicleCount}
                          </Typography>
                        </Box>
                      </StyledGridItem>
                      
                      <StyledGridItem item xs={12} sm={6}>
                        <Box sx={{ 
                          p: 2, 
                          backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                          borderRadius: 2,
                          height: '100%' 
                        }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Traffic Level
                          </Typography>
                          <Typography variant="h5" fontWeight={600} sx={{ 
                            color: getTrafficLevelColor(intersection.trafficLevel),
                            display: 'flex',
                            alignItems: 'center',
                            '& .chip': {
                              ml: 1,
                              fontSize: '0.75rem',
                              borderRadius: '12px',
                              padding: '4px 8px',
                              backgroundColor: `rgba(${intersection.trafficLevel === 'Low' ? '103, 174, 110' : intersection.trafficLevel === 'Medium' ? '255, 152, 0' : '244, 67, 54'}, 0.1)`,
                            }
                          }}>
                            {intersection.trafficLevel}
                            <span className="chip">{intersection.trafficLevel === 'Low' ? 'Normal Flow' : intersection.trafficLevel === 'Medium' ? 'Moderate' : 'Congested'}</span>
                          </Typography>
                        </Box>
                      </StyledGridItem>
                      
                      <StyledGridItem item xs={12} sm={6}>
                        <Box sx={{ 
                          p: 2, 
                          backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                          borderRadius: 2,
                          height: '100%'
                        }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Average Speed
                          </Typography>
                          <Typography variant="h4" fontWeight={600} color="#333">
                            {intersection.trafficLevel === 'Low' ? '35' : intersection.trafficLevel === 'Medium' ? '28' : '15'} <span style={{ fontSize: '1rem' }}>mph</span>
                          </Typography>
                        </Box>
                      </StyledGridItem>
                      
                      <StyledGridItem item xs={12} sm={6}>
                        <Box sx={{ 
                          p: 2, 
                          backgroundColor: 'rgba(103, 174, 110, 0.05)', 
                          borderRadius: 2,
                          height: '100%'
                        }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Wait Time
                          </Typography>
                          <Typography variant="h4" fontWeight={600} color="#333">
                            {intersection.trafficLevel === 'Low' ? '45' : intersection.trafficLevel === 'Medium' ? '90' : '180'} <span style={{ fontSize: '1rem' }}>sec</span>
                          </Typography>
                        </Box>
                      </StyledGridItem>
                    </StyledGridContainer>
                  </StyledCard>
                </StyledGridItem>
                
                {/* Traffic Light Control - Fixed missing closing tag and structure */}
                <StyledGridItem item xs={12} md={6}>
                  <StyledCard sx={{ p: 3 }}>
                    <SectionTitle>
                      <SettingsIcon />
                      Traffic Light Control
                    </SectionTitle>
                    
                    <StyledGridContainer container spacing={2}>
                      <StyledGridItem item xs={12}>
                        <Typography variant="body2" fontWeight={500} color="text.secondary" gutterBottom>
                          Signal Timing Mode
                        </Typography>
                        <ToggleButtonGroup
                          value={videoMode === 'analytics' ? 'manual' : 'automatic'}
                          exclusive
                          onChange={(e, val) => {
                            if (val) setVideoMode(val === 'automatic' ? 'live' : 'analytics');
                          }}
                          size="small"
                          fullWidth
                          aria-label="signal timing mode"
                          sx={{
                            '.MuiToggleButtonGroup-grouped': {
                              border: '1px solid #e0e0e0',
                                py: 1,
                              '&.Mui-selected': {
                                backgroundColor: 'rgba(103, 174, 110, 0.1)',
                                color: '#67AE6E',
                                fontWeight: 500
                              }
                            }
                          }}
                        >
                          <ToggleButton value="automatic" aria-label="automatic mode" sx={{ textTransform: 'none' }}>
                            Automatic
                          </ToggleButton>
                          <ToggleButton value="manual" aria-label="manual mode" sx={{ textTransform: 'none' }}>
                            Manual
                          </ToggleButton>
                        </ToggleButtonGroup>
                        </StyledGridItem>
                      
                      <StyledGridItem item xs={12}>
                        <Box sx={{ backgroundColor: 'rgba(103, 174, 110, 0.05)', p: 2, borderRadius: 2 }}>
                          <Typography variant="body2" fontWeight={500} color="text.secondary" gutterBottom>
                            AI Optimization
                          </Typography>
                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
                            <Slider
                              value={75}
                              min={0}
                              max={100}
                              step={5}
                              valueLabelDisplay="auto"
                                  marks={[
                                    { value: 0, label: 'Off' },
                                    { value: 50, label: 'Balanced' },
                                    { value: 100, label: 'Max' },
                                  ]}
                              sx={{ flexGrow: 1, mr: 2, color: '#67AE6E' }}
                              aria-labelledby="ai-optimization-slider"
                              disabled={videoMode === 'analytics'}
                            />
                            <Chip
                              label="Active"
                              size="small"
                              sx={{
                                backgroundColor: 'rgba(103, 174, 110, 0.1)',
                                color: '#67AE6E',
                                fontSize: '0.75rem',
                                fontWeight: 500
                              }}
                            />
                          </Box>
                        </Box>
                        </StyledGridItem>
                      
                      <StyledGridItem item xs={12}>
                      <Button 
                        variant="contained" 
                        fullWidth
                        sx={{ 
                          backgroundColor: '#67AE6E',
                          '&:hover': {
                            backgroundColor: '#5a9c60',
                          },
                            mt: 1,
                            py: 1.5
                        }}
                        disabled={videoMode !== 'analytics'}
                      >
                        Apply Changes
                      </Button>
                      </StyledGridItem>
                    </StyledGridContainer>
                  </StyledCard>
                </StyledGridItem>
                
                {/* Traffic Light Management Section - NEW */}
                <StyledGridItem item xs={12}>
                  <StyledCard 
                    sx={{ 
                      p: 3, 
                      mt: 2, 
                      mb: 5, 
                      border: '3px solid #f44336', 
                      boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
                      position: 'relative',
                      '&:before': {
                        content: '"TRAFFIC MANAGEMENT SECTION"',
                        position: 'absolute',
                        top: '-12px',
                        left: '50%',
                        transform: 'translateX(-50%)',
                        backgroundColor: '#f44336',
                        color: 'white',
                        padding: '2px 8px',
                        borderRadius: '4px',
                        fontSize: '0.7rem',
                        fontWeight: 'bold'
                      }
                    }} 
                    ref={trafficMgmtRef}
                  >
                    <SectionTitle>
                      <TrafficIcon />
                      Traffic Light Management
                    </SectionTitle>
                    
                    <StyledGridContainer container spacing={3}>
                      {/* Adaptive Algorithm Configuration */}
                      <StyledGridItem item xs={12} md={6}>
                        <Box>
                          <Typography variant="h6" sx={{ fontSize: '1rem', fontWeight: 600, mb: 2 }}>
                            Adaptive Algorithm Configuration
                          </Typography>
                          
                          <StyledGridContainer container spacing={2}>
                            {/* Parameter Weightage */}
                            <StyledGridItem item xs={12}>
                              <Box sx={{ backgroundColor: 'rgba(103, 174, 110, 0.05)', p: 2, borderRadius: 2, mb: 2 }}>
                                <Typography variant="body2" fontWeight={500} color="text.secondary" gutterBottom>
                                  Parameter Weightage
                                </Typography>
                                
                                <Box sx={{ mb: 3 }}>
                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                    <Typography variant="body2">Vehicle Density</Typography>
                                    <Typography variant="body2" color="text.secondary">40%</Typography>
                                  </Box>
                                  <Slider
                                    defaultValue={40}
                                    aria-label="Vehicle Density"
                                    valueLabelDisplay="auto"
                                    sx={{ color: '#67AE6E' }}
                                  />
                                </Box>
                                
                                <Box sx={{ mb: 3 }}>
                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                      <Typography variant="body2">Emergency Vehicles</Typography>
                                      <Chip 
                                        label="Priority" 
                                        size="small"
                                        sx={{ 
                                          ml: 1, 
                                          backgroundColor: 'rgba(244, 67, 54, 0.1)', 
                                          color: '#f44336',
                                          height: 20,
                                          fontSize: '0.7rem'
                                        }} 
                                      />
                                    </Box>
                                    <Typography variant="body2" color="text.secondary">30%</Typography>
                                  </Box>
                                  <Slider
                                    defaultValue={30}
                                    aria-label="Emergency Vehicles"
                                    valueLabelDisplay="auto"
                                    sx={{ color: '#f44336' }}
                                  />
                                </Box>
                                
                                <Box>
                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                    <Typography variant="body2">Wait Time</Typography>
                                    <Typography variant="body2" color="text.secondary">30%</Typography>
                                  </Box>
                                  <Slider
                                    defaultValue={30}
                                    aria-label="Wait Time"
                                    valueLabelDisplay="auto"
                                    sx={{ color: '#67AE6E' }}
                                  />
                                </Box>
                              </Box>
                            </StyledGridItem>
                            
                            {/* Congestion Thresholds */}
                            <StyledGridItem item xs={12}>
                              <Box sx={{ backgroundColor: 'rgba(103, 174, 110, 0.05)', p: 2, borderRadius: 2 }}>
                                <Typography variant="body2" fontWeight={500} color="text.secondary" gutterBottom>
                                  Congestion Thresholds
                                </Typography>
                                
                                <StyledGridContainer container spacing={2}>
                                  <StyledGridItem item xs={6}>
                                    <FormControl fullWidth size="small">
                                      <Typography variant="caption" gutterBottom>Low Traffic (vehicles)</Typography>
                                      <Select
                                        value={50}
                                        variant="outlined"
                                        sx={{ fontSize: '0.875rem' }}
                                      >
                                        <MenuItem value={30}>30</MenuItem>
                                        <MenuItem value={40}>40</MenuItem>
                                        <MenuItem value={50}>50</MenuItem>
                                        <MenuItem value={60}>60</MenuItem>
                                      </Select>
                                    </FormControl>
                                  </StyledGridItem>
                                  
                                  <StyledGridItem item xs={6}>
                                    <FormControl fullWidth size="small">
                                      <Typography variant="caption" gutterBottom>Medium Traffic (vehicles)</Typography>
                                      <Select
                                        value={100}
                                        variant="outlined"
                                        sx={{ fontSize: '0.875rem' }}
                                      >
                                        <MenuItem value={80}>80</MenuItem>
                                        <MenuItem value={90}>90</MenuItem>
                                        <MenuItem value={100}>100</MenuItem>
                                        <MenuItem value={110}>110</MenuItem>
                                      </Select>
                                    </FormControl>
                                  </StyledGridItem>
                                  
                                  <StyledGridItem item xs={12}>
                                    <Box sx={{ 
                                      mt: 1, 
                                      p: 1.5, 
                                      border: '1px dashed #67AE6E', 
                                      borderRadius: 1,
                                      display: 'flex',
                                      alignItems: 'center',
                                      justifyContent: 'space-between',
                                      backgroundColor: 'rgba(103, 174, 110, 0.03)'
                                    }}>
                                      <Typography variant="body2">
                                        Current traffic condition:
                                      </Typography>
                                      <Chip
                                        label={intersection.trafficLevel}
                                        size="small"
                                        sx={{
                                          backgroundColor: `rgba(${intersection.trafficLevel === 'Low' ? '103, 174, 110' : intersection.trafficLevel === 'Medium' ? '255, 152, 0' : '244, 67, 54'}, 0.1)`,
                                          color: getTrafficLevelColor(intersection.trafficLevel),
                                          fontSize: '0.75rem',
                                          fontWeight: 500
                                        }}
                                      />
                                    </Box>
                                  </StyledGridItem>
                                </StyledGridContainer>
                              </Box>
                            </StyledGridItem>
                          </StyledGridContainer>
                        </Box>
                      </StyledGridItem>
                      
                      {/* Manual Override */}
                      <StyledGridItem item xs={12} md={6}>
                        <Box>
                          <Typography variant="h6" sx={{ fontSize: '1rem', fontWeight: 600, mb: 2, display: 'flex', alignItems: 'center' }}>
                            Manual Override
                            <Chip 
                              label="Emergency Use" 
                              size="small" 
                              sx={{ 
                                ml: 1.5,
                                backgroundColor: 'rgba(244, 67, 54, 0.1)',
                                color: '#f44336',
                                fontWeight: 500,
                                fontSize: '0.75rem'
                              }} 
                            />
                          </Typography>
                          
                          <Box sx={{ 
                            backgroundColor: 'rgba(244, 67, 54, 0.05)', 
                            p: 2, 
                            borderRadius: 2,
                            border: '1px solid rgba(244, 67, 54, 0.2)',
                            mb: 3
                          }}>
                            <Typography variant="body2" sx={{ mb: 2 }}>
                              These controls are for emergency situations only. Use with caution.
                            </Typography>
                            
                            <StyledGridContainer container spacing={2}>
                              <StyledGridItem item xs={6}>
                                <Button
                                  variant="contained"
                                  fullWidth
                                  color="error"
                                  sx={{ py: 2, fontWeight: 600 }}
                                >
                                  All Directions STOP
                                </Button>
                              </StyledGridItem>
                              
                              <StyledGridItem item xs={6}>
                                <Button
                                  variant="contained"
                                  fullWidth
                                  sx={{ 
                                    py: 2, 
                                    backgroundColor: '#1976d2',
                                    fontWeight: 600,
                                    '&:hover': {
                                      backgroundColor: '#1565c0',
                                    }
                                  }}
                                >
                                  Emergency Vehicle Priority
                                </Button>
                              </StyledGridItem>
                            </StyledGridContainer>
                          </Box>
                          
                          <Box sx={{ backgroundColor: 'rgba(103, 174, 110, 0.05)', p: 2, borderRadius: 2 }}>
                            <Typography variant="body2" fontWeight={500} color="text.secondary" gutterBottom>
                              Direction Priority
                            </Typography>
                            
                            <StyledGridContainer container spacing={2}>
                              <StyledGridItem item xs={6}>
                                <Button
                                  variant="outlined"
                                  fullWidth
                                  sx={{ 
                                    py: 1.5,
                                    borderColor: '#67AE6E',
                                    color: '#67AE6E',
                                    '&:hover': {
                                      backgroundColor: 'rgba(103, 174, 110, 0.05)',
                                      borderColor: '#5a9c60',
                                    }
                                  }}
                                >
                                  North/South Flow
                                </Button>
                              </StyledGridItem>
                              
                              <StyledGridItem item xs={6}>
                                <Button
                                  variant="outlined"
                                  fullWidth
                                  sx={{ 
                                    py: 1.5,
                                    borderColor: '#67AE6E',
                                    color: '#67AE6E',
                                    '&:hover': {
                                      backgroundColor: 'rgba(103, 174, 110, 0.05)',
                                      borderColor: '#5a9c60',
                                    }
                                  }}
                                >
                                  East/West Flow
                                </Button>
                              </StyledGridItem>
                              
                              <StyledGridItem item xs={12}>
                                <Box sx={{ 
                                  display: 'flex', 
                                  justifyContent: 'center', 
                                  mt: 1, 
                                  p: 1.5, 
                                  border: '1px dashed #ccc', 
                                  borderRadius: 1 
                                }}>
                                  <Typography variant="body2" color="text.secondary">
                                    Current cycle: Automatic Control Active
                                  </Typography>
                                </Box>
                              </StyledGridItem>
                            </StyledGridContainer>
                          </Box>
                        </Box>
                      </StyledGridItem>
                      
                      {/* Save Configuration Button */}
                      <StyledGridItem item xs={12}>
                        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 1 }}>
                          <Button
                            variant="contained"
                            sx={{ 
                              backgroundColor: '#67AE6E',
                              '&:hover': {
                                backgroundColor: '#5a9c60',
                              },
                              px: 4
                            }}
                          >
                            Save Configuration
                          </Button>
                        </Box>
                      </StyledGridItem>
                    </StyledGridContainer>
                  </StyledCard>
                </StyledGridItem>
              </StyledGridContainer>
            </>
          )}
          
          {/* Emergency Fallback Display of Traffic Light Management */}
          {activeTab === 1 && (
            <Box sx={{ 
              mt: 5, 
              pt: 5,
              pb: 10,
              border: '5px solid red',
              borderRadius: 2,
              p: 3,
              backgroundColor: '#fff3f3',
              position: 'relative'
            }}>
              <Typography variant="h4" sx={{ 
                color: 'red', 
                textAlign: 'center', 
                mb: 3,
                fontWeight: 'bold',
                textTransform: 'uppercase'
              }}>
                Emergency Display: Traffic Light Management
              </Typography>
              
              <Typography variant="body1" sx={{ mb: 2, textAlign: 'center' }}>
                If you can see this section but not the Traffic Light Management section above, please check your browser's compatibility or try a different browser.
              </Typography>
              
              <Button
                variant="contained"
                color="error"
                fullWidth
                size="large"
                onClick={scrollToTrafficMgmt}
                sx={{ mb: 3, py: 2 }}
              >
                Try To Scroll To Traffic Light Management Again
              </Button>
              
              <Typography variant="body1" fontWeight="bold" sx={{ mb: 1 }}>
                Features included in the Traffic Light Management section:
              </Typography>
              
              <ul>
                <li><Typography variant="body2" sx={{ mb: 1 }}>Adaptive Algorithm Configuration (Parameter Weightage Sliders)</Typography></li>
                <li><Typography variant="body2" sx={{ mb: 1 }}>Congestion Thresholds Configuration</Typography></li>
                <li><Typography variant="body2" sx={{ mb: 1 }}>Emergency Manual Override Controls</Typography></li>
                <li><Typography variant="body2" sx={{ mb: 1 }}>Direction Priority Controls (North/South and East/West)</Typography></li>
                <li><Typography variant="body2" sx={{ mb: 1 }}>Save Configuration Button</Typography></li>
              </ul>
            </Box>
          )}
        </Box>
      </Box>
    </Box>
  );
};

export default CameraDetail;
